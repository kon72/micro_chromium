--- a/base/debug/debugger_posix.cc
+++ b/base/debug/debugger_posix.cc
@@ -50,7 +50,7 @@
 #include "base/environment.h"
 #include "base/files/file_util.h"
 #include "base/posix/eintr_wrapper.h"
-#include "base/process/process.h"
+#include "base/process/process_handle.h"
 #include "base/strings/string_number_conversions.h"
 
 #if defined(USE_SYMBOLIZE)
@@ -154,13 +154,13 @@ void VerifyDebugger() {
 // Another option that is common is to try to ptrace yourself, but then we
 // can't detach without forking(), and that's not so great.
 // static
-Process GetDebuggerProcess() {
+ProcessHandle GetDebuggerProcess() {
   // NOTE: This code MUST be async-signal safe (it's used by in-process
   // stack dumping signal handler). NO malloc or stdio is allowed here.
 
   int status_fd = open("/proc/self/status", O_RDONLY);
   if (status_fd == -1) {
-    return Process();
+    return kNullProcessHandle;
   }
 
   // We assume our line will be in the first 1024 characters and that we can
@@ -171,11 +171,11 @@ Process GetDebuggerProcess() {
   ssize_t num_read = HANDLE_EINTR(read(
       status_fd, buf.data(), (buf.size() * sizeof(decltype(buf)::value_type))));
   if (IGNORE_EINTR(close(status_fd)) < 0) {
-    return Process();
+    return kNullProcessHandle;
   }
 
   if (num_read <= 0) {
-    return Process();
+    return kNullProcessHandle;
   }
 
   std::string_view status(buf.data(), static_cast<size_t>(num_read));
@@ -183,26 +183,26 @@ Process GetDebuggerProcess() {
 
   std::string_view::size_type pid_index = status.find(tracer);
   if (pid_index == std::string_view::npos) {
-    return Process();
+    return kNullProcessHandle;
   }
   pid_index += tracer.size();
   std::string_view::size_type pid_end_index = status.find('\n', pid_index);
   if (pid_end_index == std::string_view::npos) {
-    return Process();
+    return kNullProcessHandle;
   }
 
   std::string_view pid_str(base::span<char>(buf).subspan(pid_index).data(),
                            pid_end_index - pid_index);
   int pid = 0;
   if (!StringToInt(pid_str, &pid)) {
-    return Process();
+    return kNullProcessHandle;
   }
 
-  return Process(pid);
+  return pid;
 }
 
 bool BeingDebugged() {
-  return GetDebuggerProcess().IsValid();
+  return GetDebuggerProcess() != kNullProcessHandle;
 }
 
 void VerifyDebugger() {
@@ -212,13 +212,15 @@ void VerifyDebugger() {
     return;
   }
 
-  Process proc = GetDebuggerProcess();
-  if (!proc.IsValid()) {
+  ProcessHandle proc = GetDebuggerProcess();
+  if (proc == kNullProcessHandle) {
     return;
   }
 
   FilePath cmdline_file =
-      FilePath("/proc").Append(NumberToString(proc.Handle())).Append("cmdline");
+      FilePath("/proc").Append(NumberToString(proc)).Append("cmdline");
+  std::string cmdline;
+  FilePath("/proc").Append(NumberToString(proc.Handle())).Append("cmdline");
   std::string cmdline;
   if (!ReadFileToString(cmdline_file, &cmdline)) {
     return;
--- a/base/process/process_handle.h
+++ b/base/process/process_handle.h
@@ -108,6 +108,7 @@ BASE_EXPORT ProcessHandle GetCurrentProc
 // processes.
 BASE_EXPORT ProcessId GetProcId(ProcessHandle process);
 
+#if 0
 #if !BUILDFLAG(IS_FUCHSIA)
 // Returns the ID for the parent of the given process. Not available on Fuchsia.
 // Returning a negative value indicates an error, such as if the |process| does
@@ -119,6 +120,7 @@ BASE_EXPORT ProcessId GetParentProcessId
 // Returns the path to the executable of the given process.
 BASE_EXPORT FilePath GetProcessExecutablePath(ProcessHandle process);
 #endif
+#endif  // 0
 
 }  // namespace base
 
--- a/base/process/process_handle_win.cc
+++ b/base/process/process_handle_win.cc
@@ -33,6 +33,7 @@ ProcessId GetProcId(ProcessHandle proces
   return result;
 }
 
+#if 0
 // Local definition to include InheritedFromUniqueProcessId which contains a
 // unique identifier for the parent process. See documentation at:
 // https://learn.microsoft.com/en-us/windows/win32/api/winternl/nf-winternl-ntqueryinformationprocess
@@ -64,5 +65,6 @@ ProcessId GetParentProcessId(ProcessHand
 
   return pid;
 }
+#endif  // 0
 
 }  // namespace base
