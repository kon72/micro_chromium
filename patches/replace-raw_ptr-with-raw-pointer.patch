--- a/base/json/json_common.h
+++ b/base/json/json_common.h
@@ -8,7 +8,6 @@
 #include <stddef.h>
 
 #include "base/check_op.h"
-#include "base/memory/raw_ptr.h"
 
 namespace base {
 namespace internal {
@@ -35,7 +34,7 @@ class StackMarker {
 
  private:
   const size_t max_depth_;
-  const raw_ptr<size_t> depth_;
+  size_t* const depth_;
 };
 
 }  // namespace internal
--- a/base/json/json_writer.h
+++ b/base/json/json_writer.h
@@ -15,7 +15,6 @@
 
 #include "base/base_export.h"
 #include "base/json/json_common.h"
-#include "base/memory/raw_ptr.h"
 #include "base/values.h"
 
 namespace base {
@@ -112,7 +111,7 @@ class BASE_EXPORT JSONWriter {
   bool pretty_print_;
 
   // Where we write JSON data as we generate it.
-  raw_ptr<std::string> json_string_;
+  std::string* json_string_;
 
   // Maximum depth to write.
   const size_t max_depth_;
--- a/base/scoped_generic.h
+++ b/base/scoped_generic.h
@@ -13,7 +13,6 @@
 
 #include "base/check.h"
 #include "base/compiler_specific.h"
-#include "base/memory/raw_ptr.h"
 
 namespace base {
 
@@ -236,7 +235,7 @@ class ScopedGeneric {
 
    private:
     T value_ = Traits::InvalidValue();
-    raw_ptr<ScopedGeneric<T, Traits>> scoped_generic_;
+    ScopedGeneric<T, Traits>* scoped_generic_;
     bool used_ = false;
   };
 
--- a/base/scoped_generic_unittest.cc
+++ b/base/scoped_generic_unittest.cc
@@ -11,7 +11,6 @@
 #include <vector>
 
 #include "base/containers/contains.h"
-#include "base/memory/raw_ptr.h"
 #include "build/build_config.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
@@ -25,7 +24,7 @@ struct IntTraits {
   static int InvalidValue() { return -1; }
   void Free(int value) { freed_ints->push_back(value); }
 
-  raw_ptr<std::vector<int>> freed_ints;
+  std::vector<int>* freed_ints;
 };
 
 using ScopedInt = ScopedGeneric<int, IntTraits>;
@@ -155,9 +154,8 @@ TEST(ScopedGenericTest, Receive) {
 namespace {
 
 struct TrackedIntTraits : public ScopedGenericOwnershipTracking {
-  using OwnerMap = std::unordered_map<
-      int,
-      raw_ptr<const ScopedGeneric<int, TrackedIntTraits>, CtnExperimental>>;
+  using OwnerMap =
+      std::unordered_map<int, const ScopedGeneric<int, TrackedIntTraits>*>;
   TrackedIntTraits(std::unordered_set<int>* freed, OwnerMap* owners)
       : freed(freed), owners(owners) {}
 
@@ -183,8 +181,8 @@ struct TrackedIntTraits : public ScopedG
     owners->erase(it);
   }
 
-  raw_ptr<std::unordered_set<int>> freed;
-  raw_ptr<OwnerMap> owners;
+  std::unordered_set<int>* freed;
+  OwnerMap* owners;
 };
 
 using ScopedTrackedInt = ScopedGeneric<int, TrackedIntTraits>;
