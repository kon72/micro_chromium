--- a/base/allocator/partition_allocator/src/partition_alloc/pointers/instance_tracer.cc
+++ b/base/allocator/partition_allocator/src/partition_alloc/pointers/instance_tracer.cc
@@ -9,6 +9,7 @@
 
 #include "partition_alloc/pointers/instance_tracer.h"
 
+#if PA_BUILDFLAG(ENABLE_BACKUP_REF_PTR_INSTANCE_TRACER)
 #include <atomic>
 #include <map>
 #include <mutex>
@@ -18,6 +19,7 @@
 #include "partition_alloc/partition_alloc_base/debug/stack_trace.h"
 #include "partition_alloc/partition_alloc_base/no_destructor.h"
 #include "partition_alloc/partition_root.h"
+#endif  // PA_BUILDFLAG(ENABLE_BACKUP_REF_PTR_INSTANCE_TRACER)
 
 namespace base::internal {
 
--- a/base/apple/foundation_util.mm
+++ b/base/apple/foundation_util.mm
@@ -13,7 +13,6 @@
 
 #include "base/apple/bridging.h"
 #include "base/apple/bundle_locations.h"
-#include "base/apple/osstatus_logging.h"
 #include "base/apple/scoped_cftyperef.h"
 #include "base/check.h"
 #include "base/compiler_specific.h"
--- a/base/cpu.cc
+++ b/base/cpu.cc
@@ -23,11 +23,13 @@
 
 #include <algorithm>
 
+#if 0
 #include "base/files/file_util.h"
 #include "base/numerics/checked_math.h"
 #include "base/strings/string_number_conversions.h"
 #include "base/strings/string_split.h"
 #include "base/strings/string_util.h"
+#endif  // 0
 
 // Temporary definitions until a new hwcap.h is pulled in everywhere.
 // https://crbug.com/1265965
--- a/base/debug/debugger_posix.cc
+++ b/base/debug/debugger_posix.cc
@@ -2,9 +2,9 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-
 #include "base/debug/debugger.h"
 
+
 #include <errno.h>
 #include <fcntl.h>
 #include <stddef.h>
@@ -48,7 +48,6 @@
 #include "base/debug/alias.h"
 #include "base/debug/debugging_buildflags.h"
 #include "base/environment.h"
-#include "base/files/file_util.h"
 #include "base/posix/eintr_wrapper.h"
 #include "base/process/process_handle.h"
 #include "base/strings/string_number_conversions.h"
@@ -57,6 +56,10 @@
 #include "base/third_party/symbolize/symbolize.h"  // nogncheck
 #endif
 
+#if BUILDFLAG(ENABLE_GDBINIT_WARNING) || BUILDFLAG(ENABLE_LLDBINIT_WARNING)
+#include "base/files/file_util.h"
+#endif
+
 namespace base::debug {
 
 #if BUILDFLAG(IS_APPLE) || BUILDFLAG(IS_BSD)
--- a/base/functional/bind_unittest.cc
+++ b/base/functional/bind_unittest.cc
@@ -15,8 +15,6 @@
 #include <utility>
 #include <vector>
 
-#include "base/allocator/partition_alloc_features.h"
-#include "base/allocator/partition_alloc_support.h"
 #include "base/functional/callback.h"
 #include "base/logging.h"
 #include "base/memory/ptr_util.h"
@@ -27,14 +25,21 @@
 #include "base/strings/string_number_conversions.h"
 #include "base/test/bind.h"
 #include "base/test/gtest_util.h"
-#include "base/test/scoped_feature_list.h"
 #include "build/build_config.h"
 #include "partition_alloc/buildflags.h"
+#include "testing/gmock/include/gmock/gmock.h"
+#include "testing/gtest/include/gtest/gtest.h"
+
+#if PA_BUILDFLAG(ENABLE_BACKUP_REF_PTR_SUPPORT) && \
+    PA_BUILDFLAG(USE_RAW_PTR_BACKUP_REF_IMPL)
+#include "base/allocator/partition_alloc_features.h"
+#include "base/allocator/partition_alloc_support.h"
+#include "base/test/scoped_feature_list.h"
 #include "partition_alloc/dangling_raw_ptr_checks.h"
 #include "partition_alloc/partition_alloc_for_testing.h"
 #include "partition_alloc/partition_root.h"
-#include "testing/gmock/include/gmock/gmock.h"
-#include "testing/gtest/include/gtest/gtest.h"
+#endif  // PA_BUILDFLAG(ENABLE_BACKUP_REF_PTR_SUPPORT) &&
+        // PA_BUILDFLAG(USE_RAW_PTR_BACKUP_REF_IMPL)
 
 using ::testing::_;
 using ::testing::AnyNumber;
@@ -2011,8 +2016,9 @@ TEST_F(BindUnretainedDanglingTest, Unsaf
 
 TEST_F(BindUnretainedDanglingTest,
        UnsafeDanglingPtrWithDummyAndDanglingTraits) {
-  raw_ptr<int, RawPtrTraits::kDummyForTest | RawPtrTraits::kMayDangle> p =
-      Alloc<int, RawPtrTraits::kDummyForTest | RawPtrTraits::kMayDangle>(3);
+  raw_ptr<int, RawPtrTraits::kDummyForTest | RawPtrTraits::kMayDangle>
+      p = Alloc < int,
+      RawPtrTraits::kDummyForTest | RawPtrTraits::kMayDangle > (3);
   auto callback =
       BindOnce(MayBeDanglingAndDummyTraitCheckFn, UnsafeDangling(p));
   Free(p);
--- a/base/memory/protected_memory_win.cc
+++ b/base/memory/protected_memory_win.cc
@@ -10,7 +10,6 @@
 
 #include "base/bits.h"
 #include "base/memory/page_size.h"
-#include "base/process/process_metrics.h"
 #include "base/synchronization/lock.h"
 #include "build/build_config.h"
 
--- a/base/memory/safe_ref_unittest.cc
+++ b/base/memory/safe_ref_unittest.cc
@@ -12,7 +12,6 @@
 #include "base/memory/raw_ptr_exclusion.h"
 #include "base/memory/weak_ptr.h"
 #include "base/test/gtest_util.h"
-#include "base/test/memory/dangling_ptr_instrumentation.h"
 #include "testing/gmock/include/gmock/gmock.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
@@ -270,6 +269,7 @@ TEST(SafeRefTest, Bind) {
   BindOnce(&WithWeak::Method, with.factory.GetSafeRef()).Run();
 }
 
+#if 0
 TEST(SafeRefTest, DanglingPointerDetector) {
   auto instrumentation = test::DanglingPtrInstrumentation::Create();
   if (!instrumentation.has_value()) {
@@ -308,6 +308,7 @@ TEST(SafeRefTest, DanglingUntriaged) {
   EXPECT_EQ(instrumentation->dangling_ptr_detected(), 0u);
   EXPECT_EQ(instrumentation->dangling_ptr_released(), 0u);
 }
+#endif  // 0
 
 }  // namespace
 }  // namespace base
--- a/base/strings/string_util_impl_helpers.h
+++ b/base/strings/string_util_impl_helpers.h
@@ -16,7 +16,6 @@
 #include "base/check_op.h"
 #include "base/compiler_specific.h"
 #include "base/logging.h"
-#include "base/notreached.h"
 #include "base/third_party/icu/icu_utf.h"
 
 namespace base::internal {
--- a/base/strings/sys_string_conversions_apple.mm
+++ b/base/strings/sys_string_conversions_apple.mm
@@ -11,7 +11,6 @@
 #include <vector>
 
 #include "base/apple/bridging.h"
-#include "base/apple/foundation_util.h"
 #include "base/apple/scoped_cftyperef.h"
 #include "base/numerics/safe_conversions.h"
 
--- a/base/synchronization/lock_impl_posix.cc
+++ b/base/synchronization/lock_impl_posix.cc
@@ -15,10 +15,10 @@
 #include "base/posix/safe_strerror.h"
 #include "base/synchronization/lock.h"
 #include "base/synchronization/synchronization_buildflags.h"
-#include "base/system/sys_info.h"
 #include "build/build_config.h"
 #if BUILDFLAG(IS_ANDROID)
 #include "base/android/background_thread_pool_field_trial.h"
+#include "base/system/sys_info.h"
 #endif
 
 
--- a/base/types/expected_unittest.cc
+++ b/base/types/expected_unittest.cc
@@ -12,8 +12,6 @@
 #include "base/containers/contains.h"
 #include "base/strings/to_string.h"
 #include "base/test/gmock_expected_support.h"
-#include "base/test/gtest_util.h"
-#include "base/types/strong_alias.h"
 #include "testing/gmock/include/gmock/gmock.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
--- a/base/win/access_token_unittest.cc
+++ b/base/win/access_token_unittest.cc
@@ -16,7 +16,6 @@
 #include "base/win/atl.h"
 #include "base/win/scoped_handle.h"
 #include "base/win/security_util.h"
-#include "base/win/windows_version.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
 namespace base::win {
--- a/base/win/sid.cc
+++ b/base/win/sid.cc
@@ -27,7 +27,6 @@
 #include "base/strings/string_util_win.h"
 #include "base/win/scoped_handle.h"
 #include "base/win/scoped_localalloc.h"
-#include "base/win/windows_version.h"
 #include "third_party/boringssl/src/include/openssl/sha.h"
 
 namespace base::win {
--- a/base/win/sid_unittest.cc
+++ b/base/win/sid_unittest.cc
@@ -22,7 +22,6 @@
 #include "base/win/scoped_handle.h"
 #include "base/win/scoped_localalloc.h"
 #include "base/win/win_util.h"
-#include "build/branding_buildflags.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
 namespace base::win {
