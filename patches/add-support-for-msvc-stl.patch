--- a/base/containers/span_unittest.cc
+++ b/base/containers/span_unittest.cc
@@ -2026,8 +2026,10 @@ TEST(SpanTest, OutOfBoundsDeath) {
       std::copy_n(span_len3.begin(), 3, span_len2.begin()), "");
 
   // Copying more values than exist in the source.
+#ifndef _MSVC_STL_VERSION
   ASSERT_DEATH_IF_SUPPORTED(
       std::copy_n(span_len2.begin(), 3, span_len3.begin()), "");
+#endif
 }
 
 TEST(SpanTest, Sort) {
--- a/base/strings/to_string_unittest.cc
+++ b/base/strings/to_string_unittest.cc
@@ -117,9 +117,12 @@ TEST(ToStringTest, Pointer) {
   int i = 42;
   std::string result_string = ToString(&i);
 
-  // The result of ToString() on a pointer is a string that begins with "0x".
   ASSERT_GT(result_string.size(), 2);
+#ifdef _MSVC_STL_VERSION
+  EXPECT_NE(result_string.substr(0, 2), "0x");
+#else
   EXPECT_EQ(result_string.substr(0, 2), "0x");
+#endif
 
   // ... and whose contents is the hex representation of the value of the actual
   // pointer value.
--- a/base/values_unittest.cc
+++ b/base/values_unittest.cc
@@ -42,9 +42,9 @@ namespace base {
 // This test is limited to NDEBUG builds, since some containers may require
 // extra storage for supporting debug checks for things like iterators.
 TEST(ValuesTest, SizeOfValue) {
-#if defined(__GLIBCXX__)
-  // libstdc++ std::string takes already 4 machine words, so the std::variant
-  // takes 5
+#if defined(__GLIBCXX__) || defined(_MSVC_STL_VERSION)
+  // libstdc++ and MSVC STL std::string takes already 4 machine words, so the
+  // std::variant takes 5
   constexpr size_t kExpectedSize = 5 * sizeof(void*);
 #else   // !defined(__GLIBCXX__)
   // libc++'s std::string and std::vector both take 3 machine words. An
