--- a/base/files/file_path.cc
+++ b/base/files/file_path.cc
@@ -25,7 +25,6 @@
 #include "base/strings/sys_string_conversions.h"
 #include "base/strings/utf_ostream_operators.h"
 #include "base/strings/utf_string_conversions.h"
-#include "base/trace_event/trace_event.h"
 
 #if BUILDFLAG(IS_APPLE)
 #include "base/apple/scoped_cftyperef.h"
@@ -1603,10 +1602,6 @@ FilePath FilePath::NormalizePathSeparato
   return NormalizePathSeparatorsTo(kSeparators[0]);
 }
 
-void FilePath::WriteIntoTrace(perfetto::TracedValue context) const {
-  perfetto::WriteIntoTracedValue(std::move(context), value());
-}
-
 FilePath FilePath::NormalizePathSeparatorsTo(CharType separator) const {
 #if defined(FILE_PATH_USES_WIN_SEPARATORS)
   DCHECK_NE(kSeparators + kSeparatorsLength,
--- a/base/files/file_path.h
+++ b/base/files/file_path.h
@@ -110,7 +110,6 @@
 
 #include "base/base_export.h"
 #include "base/compiler_specific.h"
-#include "base/trace_event/base_tracing_forward.h"
 #include "build/build_config.h"
 
 // Windows-style drive letter support and pathname separator characters can be
@@ -491,9 +490,6 @@ class BASE_EXPORT FilePath {
     return CompareIgnoreCase(string1, string2) < 0;
   }
 
-  // Serialise this object into a trace.
-  void WriteIntoTrace(perfetto::TracedValue context) const;
-
 #if BUILDFLAG(IS_APPLE)
   // Returns the string in the special canonical decomposed form as defined for
   // HFS, which is close to, but not quite, decomposition form D. See
--- a/base/files/file_path_unittest.cc
+++ b/base/files/file_path_unittest.cc
@@ -25,7 +25,6 @@
 #include "build/buildflag.h"
 #include "testing/gtest/include/gtest/gtest.h"
 #include "testing/platform_test.h"
-#include "third_party/perfetto/include/perfetto/test/traced_value_test_support.h"
 
 #if BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)
 #include "base/test/scoped_locale.h"
@@ -552,7 +551,7 @@ TEST_F(FilePathTest, IsAbsoluteOrNetwork
       {FPL("c:/"), true, false},     {FPL("c:/a"), true, false},
       {FPL("c:/."), true, false},    {FPL("c:/.."), true, false},
       {FPL("C:/a"), true, false},    {FPL("d:/a"), true, false},
-#else  // FILE_PATH_USES_DRIVE_LETTERS
+#else   // FILE_PATH_USES_DRIVE_LETTERS
       {FPL("/"), true, false},
       {FPL("/a"), true, false},
       {FPL("/."), true, false},
@@ -571,7 +570,7 @@ TEST_F(FilePathTest, IsAbsoluteOrNetwork
       {FPL("c:\\a"), true, false},   {FPL("c:\\."), true, false},
       {FPL("c:\\.."), true, false},  {FPL("C:\\a"), true, false},
       {FPL("d:\\a"), true, false},
-#else  // FILE_PATH_USES_DRIVE_LETTERS
+#else   // FILE_PATH_USES_DRIVE_LETTERS
       {FPL("\\"), true, false},      {FPL("\\a"), true, false},
       {FPL("\\."), true, false},     {FPL("\\.."), true, false},
       {FPL("c:\\"), false, false},
@@ -1658,9 +1657,11 @@ TEST_F(FilePathTest, PrintToOstream) {
   EXPECT_EQ("foo", ss.str());
 }
 
+#if 0
 TEST_F(FilePathTest, TracedValueSupport) {
   EXPECT_EQ(perfetto::TracedValueToString(FilePath(FPL("foo"))), "foo");
 }
+#endif  // 0
 
 // Test GetHFSDecomposedForm should return empty result for invalid UTF-8
 // strings.
--- a/base/json/json_reader.cc
+++ b/base/json/json_reader.cc
@@ -8,18 +8,13 @@
 #include <utility>
 
 #include "base/logging.h"
-#include "base/metrics/histogram_macros.h"
 #include "base/strings/strcat.h"
 #include "base/strings/string_number_conversions.h"
-#include "build/build_config.h"
 #include "base/strings/string_view_rust.h"
+#include "build/build_config.h"
 #include "third_party/rust/serde_json_lenient/v0_2/wrapper/functions.h"
 #include "third_party/rust/serde_json_lenient/v0_2/wrapper/lib.rs.h"
 
-namespace {
-const char kSecurityJsonParsingTime[] = "Security.JSONParser.ParsingTime";
-}  // namespace
-
 // This namespace defines FFI-friendly functions that are be called from Rust in
 // //third_party/rust/serde_json_lenient/v0_2/wrapper/.
 namespace serde_json_lenient {
@@ -133,8 +128,6 @@ std::string JSONReader::Error::ToString(
 std::optional<Value> JSONReader::Read(std::string_view json,
                                       int options,
                                       size_t max_depth) {
-  SCOPED_UMA_HISTOGRAM_TIMER_MICROS(kSecurityJsonParsingTime);
-
   JSONReader::Result result =
       serde_json_lenient::DecodeJSONInRust(json, options, max_depth);
   if (!result.has_value()) {
@@ -169,7 +162,6 @@ std::optional<Value::List> JSONReader::R
 JSONReader::Result JSONReader::ReadAndReturnValueWithError(
     std::string_view json,
     int options) {
-  SCOPED_UMA_HISTOGRAM_TIMER_MICROS(kSecurityJsonParsingTime);
   return serde_json_lenient::DecodeJSONInRust(json, options,
                                               internal::kAbsoluteMaxDepth);
 }
--- a/base/values.cc
+++ b/base/values.cc
@@ -27,9 +27,6 @@
 #include "base/notreached.h"
 #include "base/strings/string_util.h"
 #include "base/strings/utf_string_conversions.h"
-#include "base/trace_event/memory_usage_estimator.h"  // no-presubmit-check
-#include "base/trace_event/trace_event.h"
-#include "base/tracing_buildflags.h"
 #include "base/types/pass_key.h"
 #include "base/types/to_address.h"
 
@@ -924,21 +921,10 @@ std::optional<Value> DictValue::ExtractB
   return extracted;
 }
 
-size_t DictValue::EstimateMemoryUsage() const {
-  return base::trace_event::EstimateMemoryUsage(storage_);
-}
-
 std::string DictValue::DebugString() const {
   return DebugStringImpl(*this);
 }
 
-void DictValue::WriteIntoTrace(perfetto::TracedValue context) const {
-  perfetto::TracedDictionary dict = std::move(context).WriteDictionary();
-  for (auto kv : *this) {
-    dict.Add(perfetto::DynamicString(kv.first), kv.second);
-  }
-}
-
 bool operator==(const DictValue& lhs, const DictValue& rhs) {
   auto deref_2nd = [](const auto& p) { return std::tie(p.first, *p.second); };
   return std::ranges::equal(lhs.storage_, rhs.storage_, {}, deref_2nd,
@@ -1265,21 +1251,10 @@ size_t ListValue::EraseValue(const Value
   return std::erase(storage_, value);
 }
 
-size_t ListValue::EstimateMemoryUsage() const {
-  return base::trace_event::EstimateMemoryUsage(storage_);
-}
-
 std::string ListValue::DebugString() const {
   return DebugStringImpl(*this);
 }
 
-void ListValue::WriteIntoTrace(perfetto::TracedValue context) const {
-  perfetto::TracedArray array = std::move(context).WriteArray();
-  for (const auto& item : *this) {
-    array.Append(item);
-  }
-}
-
 ListValue::ListValue(const std::vector<Value>& storage) {
   storage_.reserve(storage.size());
   for (const auto& value : storage) {
@@ -1316,48 +1291,10 @@ bool Value::operator==(const ListValue&
   return is_list() && GetList() == rhs;
 }
 
-size_t Value::EstimateMemoryUsage() const {
-  switch (type()) {
-    case Type::STRING:
-      return base::trace_event::EstimateMemoryUsage(GetString());
-    case Type::BINARY:
-      return base::trace_event::EstimateMemoryUsage(GetBlob());
-    case Type::DICT:
-      return GetDict().EstimateMemoryUsage();
-    case Type::LIST:
-      return GetList().EstimateMemoryUsage();
-    default:
-      return 0;
-  }
-}
-
 std::string Value::DebugString() const {
   return DebugStringImpl(*this);
 }
 
-void Value::WriteIntoTrace(perfetto::TracedValue context) const {
-  Visit([&](const auto& member) {
-    using T = std::decay_t<decltype(member)>;
-    if constexpr (std::is_same_v<T, std::monostate>) {
-      std::move(context).WriteString("<none>");
-    } else if constexpr (std::is_same_v<T, bool>) {
-      std::move(context).WriteBoolean(member);
-    } else if constexpr (std::is_same_v<T, int>) {
-      std::move(context).WriteInt64(member);
-    } else if constexpr (std::is_same_v<T, DoubleStorage>) {
-      std::move(context).WriteDouble(member);
-    } else if constexpr (std::is_same_v<T, std::string>) {
-      std::move(context).WriteString(member);
-    } else if constexpr (std::is_same_v<T, BlobStorage>) {
-      std::move(context).WriteString("<binary data not supported>");
-    } else if constexpr (std::is_same_v<T, Dict>) {
-      member.WriteIntoTrace(std::move(context));
-    } else if constexpr (std::is_same_v<T, List>) {
-      member.WriteIntoTrace(std::move(context));
-    }
-  });
-}
-
 ValueView::ValueView(const Value& value)
     : data_view_(
           value.Visit([](const auto& member) { return ViewType(member); })) {}
--- a/base/values.h
+++ b/base/values.h
@@ -29,7 +29,6 @@
 #include "base/containers/checked_iterators.h"
 #include "base/containers/flat_map.h"
 #include "base/containers/span.h"
-#include "base/trace_event/base_tracing_forward.h"
 #include "base/types/pass_key.h"
 #include "base/value_iterators.h"
 
@@ -214,16 +213,9 @@ class BASE_EXPORT GSL_OWNER ListValue {
     return std::erase_if(storage_, predicate);
   }
 
-  // Estimates dynamic memory usage. See
-  // base/trace_event/memory_usage_estimator.h for more info.
-  size_t EstimateMemoryUsage() const;
-
   // Serializes to a string for logging and debug purposes.
   std::string DebugString() const;
 
-  // Write this object into a trace.
-  void WriteIntoTrace(perfetto::TracedValue) const;
-
  private:
   using ListStorage = std::vector<Value>;
 
@@ -540,16 +532,9 @@ class BASE_EXPORT GSL_OWNER DictValue {
 
   std::optional<Value> ExtractByDottedPath(std::string_view path);
 
-  // Estimates dynamic memory usage. See
-  // base/trace_event/memory_usage_estimator.h for more info.
-  size_t EstimateMemoryUsage() const;
-
   // Serializes to a string for logging and debug purposes.
   std::string DebugString() const;
 
-  // Write this object into a trace.
-  void WriteIntoTrace(perfetto::TracedValue) const;
-
  private:
   BASE_EXPORT friend bool operator==(const DictValue& lhs,
                                      const DictValue& rhs);
@@ -821,8 +806,6 @@ class BASE_EXPORT GSL_OWNER Value {
   Dict TakeDict() &&;
   List TakeList() &&;
 
-
-
   // Note: Do not add more types. See the file-level comment above for why.
 
   // Comparison operators so that Values can easily be used with standard
@@ -852,16 +835,9 @@ class BASE_EXPORT GSL_OWNER Value {
   bool operator==(const DictValue& rhs) const;
   bool operator==(const ListValue& rhs) const;
 
-  // Estimates dynamic memory usage. See
-  // base/trace_event/memory_usage_estimator.h for more info.
-  size_t EstimateMemoryUsage() const;
-
   // Serializes to a string for logging and debug purposes.
   std::string DebugString() const;
 
-  // Write this object into a trace.
-  void WriteIntoTrace(perfetto::TracedValue) const;
-
   template <typename Visitor>
   auto Visit(Visitor&& visitor) const {
     return std::visit(std::forward<Visitor>(visitor), data_);
--- a/base/values_unittest.cc
+++ b/base/values_unittest.cc
@@ -32,7 +32,6 @@
 #include "build/build_config.h"
 #include "testing/gmock/include/gmock/gmock.h"
 #include "testing/gtest/include/gtest/gtest.h"
-#include "third_party/perfetto/include/perfetto/test/traced_value_test_support.h"
 
 namespace base {
 
@@ -2205,6 +2204,7 @@ TEST(ValuesTest, MutableGetBlob) {
   EXPECT_EQ(new_blob, value.GetBlob());
 }
 
+#if 0
 TEST(ValuesTest, TracingSupport) {
   EXPECT_EQ(perfetto::TracedValueToString(Value(false)), "false");
   EXPECT_EQ(perfetto::TracedValueToString(Value(1)), "1");
@@ -2228,6 +2228,7 @@ TEST(ValuesTest, TracingSupport) {
               "{key:value}");
   }
 }
+#endif  // 0
 
 TEST(ValueViewTest, BasicConstruction) {
   {
