--- a/base/files/file_path.cc
+++ b/base/files/file_path.cc
@@ -16,7 +16,6 @@
 #include <string_view>
 
 #include "base/check_op.h"
-#include "base/features.h"
 #include "base/files/safe_base_name.h"
 #include "base/numerics/safe_conversions.h"
 #include "base/pickle.h"
@@ -97,6 +96,7 @@ bool EqualDriveLetterCaseInsensitive(Str
   return a_rest == b_rest;
 }
 
+#if 0
 // Returns true if `left` and `right` are equivalent drive letter components.
 // Will return false if `left` or `right` is not a drive letter component.
 bool AreDriveLetterComponentsEqual(FilePath::StringViewType left,
@@ -109,6 +109,7 @@ bool AreDriveLetterComponentsEqual(FileP
          right[1] == ':' && IsAsciiAlpha(left[0]) &&
          ToLowerASCII(left[0]) == ToLowerASCII(right[0]);
 }
+#endif  // 0
 #endif  // defined(FILE_PATH_USES_DRIVE_LETTERS)
 
 bool IsPathAbsolute(StringViewType path) {
@@ -205,6 +206,7 @@ bool IsEmptyOrSpecialCase(const StringTy
   return false;
 }
 
+#if 0
 // Splits `path` in 2 parts: the first component and the remainder of the path.
 // Leading separators are removed from the remainder of the path, unless
 // `can_be_drive_letter` is true. `can_be_drive_letter` indicates that a leading
@@ -278,9 +280,11 @@ ExtractFirstComponent(FilePath::StringVi
 // State of the `FastFilePathIsParent` feature, to be updated after the feature
 // list is available.
 std::atomic_bool g_fast_file_path_is_parent{false};
+#endif  // 0
 
 }  // namespace
 
+#if 0
 void FilePath::InitializeFeatures() {
   // `std::memory_order_relaxed` because there are no dependencies with other
   // memory operations.
@@ -288,6 +292,7 @@ void FilePath::InitializeFeatures() {
       FeatureList::IsEnabled(features::kFastFilePathIsParent),
       std::memory_order_relaxed);
 }
+#endif  // 0
 
 FilePath::FilePath() = default;
 
@@ -366,15 +371,18 @@ std::vector<FilePath::StringType> FilePa
 }
 
 bool FilePath::IsParent(const FilePath& child) const {
+#if 0
   // `std::memory_order_relaxed` because there are no dependencies with other
   // memory operations.
   if (g_fast_file_path_is_parent.load(std::memory_order_relaxed)) {
     return IsParentFast(child);
   }
+#endif  // 0
 
   return IsParentSlow(child);
 }
 
+#if 0
 bool FilePath::IsParentFast(const FilePath& child) const {
   StringViewType parent_view = path_;
   StringViewType child_view = child.path_;
@@ -447,6 +455,7 @@ bool FilePath::IsParentFast(const FilePa
     child_view = child_remainder;
   }
 }
+#endif  // 0
 
 bool FilePath::IsParentSlow(const FilePath& child) const {
   return AppendRelativePath(child, nullptr);
--- a/base/files/file_path.h
+++ b/base/files/file_path.h
@@ -195,8 +195,10 @@ class BASE_EXPORT FilePath {
   // The character used to identify a file extension.
   static constexpr CharType kExtensionSeparator = FILE_PATH_LITERAL('.');
 
+#if 0
   // Initializes features for this class. See `base::features::Init()`.
   static void InitializeFeatures();
+#endif  // 0
 
   FilePath();
   FilePath(const FilePath& that);
@@ -535,7 +537,9 @@ class BASE_EXPORT FilePath {
   // support UNC paths on Windows.
   void StripTrailingSeparatorsInternal();
 
+#if 0
   bool IsParentFast(const FilePath& child) const;
+#endif  // 0
   bool IsParentSlow(const FilePath& child) const;
 
   StringType path_;
--- a/base/files/file_path_unittest.cc
+++ b/base/files/file_path_unittest.cc
@@ -15,12 +15,10 @@
 #include <sstream>
 #include <string_view>
 
-#include "base/features.h"
 #include "base/files/safe_base_name.h"
 #include "base/strings/utf_ostream_operators.h"
 #include "base/strings/utf_string_conversions.h"
 #include "base/test/gtest_util.h"
-#include "base/test/scoped_feature_list.h"
 #include "build/build_config.h"
 #include "build/buildflag.h"
 #include "testing/gtest/include/gtest/gtest.h"
@@ -773,6 +771,7 @@ void IsParentTest(bool is_fast) {
   }
 }
 
+#if 0
 TEST_F(FilePathTest, IsParentFastTest) {
   {
     test::ScopedFeatureList feature_list;
@@ -783,16 +782,21 @@ TEST_F(FilePathTest, IsParentFastTest) {
   // Reset feature state.
   FilePath::InitializeFeatures();
 }
+#endif  // 0
 
 TEST_F(FilePathTest, IsParentSlowTest) {
   {
+#if 0
     test::ScopedFeatureList feature_list;
     feature_list.InitAndDisableFeature(features::kFastFilePathIsParent);
     FilePath::InitializeFeatures();
+#endif  // 0
     IsParentTest(/*is_fast=*/false);
   }
+#if 0
   // Reset feature state.
   FilePath::InitializeFeatures();
+#endif  // 0
 }
 
 TEST_F(FilePathTest, AppendRelativePathTest) {
--- a/base/time/time_win.cc
+++ b/base/time/time_win.cc
@@ -47,13 +47,10 @@
 #include <atomic>
 #include <ostream>
 
-#include "base/base_switches.h"
 #include "base/bit_cast.h"
 #include "base/check_op.h"
-#include "base/command_line.h"
 #include "base/cpu.h"
 #include "base/notreached.h"
-#include "base/rand_util.h"
 #include "base/synchronization/lock.h"
 #include "base/threading/platform_thread_handle.h"
 #include "base/time/time_override.h"
@@ -571,7 +568,9 @@ TimeTicks QPCNow() {
   return TimeTicks() + QPCValueToTimeDelta(QPCNowRaw());
 }
 
+#if 0
 std::atomic<bool> g_opted_out_of_qpc_trial_because_no_command_line = false;
+#endif  // 0
 
 void InitializeNowFunctionPointer() {
   LARGE_INTEGER ticks_per_sec = {};
@@ -597,15 +596,19 @@ void InitializeNowFunctionPointer() {
   // ~97% of users fall within this category.
   bool eligible_for_high_res_time_ticks = false;
 
+#if 0
   // To debug an issue where in the field, all clients are in the Control group.
   // We suspect it might be due to the command line not being ready before this
   // function is called in some build configurations.
   bool opted_out_because_no_command_line = false;
+#endif  // 0
 
   // `ticks_per_sec.QuadPart <= 0` shouldn't happen post-WinXP (see CHECKs
   // above) but if it does, QPC is broken and shouldn't be used for any reason.
   if (ticks_per_sec.QuadPart > 0) {
     CPU cpu;
+    bool force_high_res_time_ticks = true;
+#if 0
     // QPC is enabled for all devices with invariant TSCs.
     // On devices where the CPU doesn't report having an invariant TSC, we would
     // previously have considered the QPC overhead to be unacceptable. For this
@@ -643,6 +646,7 @@ void InitializeNowFunctionPointer() {
     } else {
       opted_out_because_no_command_line = true;
     }
+#endif  // 0
 
     eligible_for_high_res_time_ticks =
         cpu.has_non_stop_time_stamp_counter() || force_high_res_time_ticks;
@@ -684,10 +688,12 @@ void InitializeNowFunctionPointer() {
     internal::g_time_ticks_now_function.store(now_function,
                                               std::memory_order_relaxed);
 
+#if 0
     // Only the thread setting the functions should report whether its command
     // line was ready.
     g_opted_out_of_qpc_trial_because_no_command_line.store(
         opted_out_because_no_command_line, std::memory_order_relaxed);
+#endif  // 0
   }
 }
 
@@ -697,6 +703,7 @@ TimeTicks InitialNowFunction() {
       std::memory_order_relaxed)();
 }
 
+#if 0
 enum class HighResolutionTrialState {
   kAlreadyHighResolution,
   kExcludedFromTrial,
@@ -741,6 +748,7 @@ HighResolutionTrialState GetHighResoluti
   // Don't add clients with ideal QPC implementations to the trial at all.
   return HighResolutionTrialState::kAlreadyHighResolution;
 }
+#endif  // 0
 
 }  // namespace
 
@@ -882,6 +890,7 @@ TimeTicks TimeTicks::FromQPCValue(LONGLO
   return TimeTicks() + QPCValueToTimeDelta(qpc_value);
 }
 
+#if 0
 // static
 bool TimeTicks::GetHighResolutionTimeTicksFieldTrial(std::string* trial_name,
                                                      std::string* group_name) {
@@ -936,6 +945,7 @@ void TimeTicks::MaybeAddHighResolutionTi
       break;
   }
 }
+#endif  // 0
 
 // TimeDelta ------------------------------------------------------------------
 
