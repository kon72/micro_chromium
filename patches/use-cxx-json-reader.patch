--- a/base/json/json_reader.cc
+++ b/base/json/json_reader.cc
@@ -8,12 +8,11 @@
 #include <utility>
 
 #include "base/logging.h"
-#include "base/metrics/histogram_macros.h"
 #include "base/strings/strcat.h"
 #include "base/strings/string_number_conversions.h"
 #include "build/build_config.h"
 
-#if BUILDFLAG(IS_NACL)
+#if 1
 #include "base/json/json_parser.h"
 #else
 #include "base/strings/string_view_rust.h"
@@ -23,7 +22,7 @@
 
 // TODO(crbug.com/40811643): Move the C++ parser into components/nacl to just
 // run in-process there. Don't compile base::JSONReader on NaCL at all.
-#if !BUILDFLAG(IS_NACL)
+#if 0
 
 namespace {
 const char kSecurityJsonParsingTime[] = "Security.JSONParser.ParsingTime";
@@ -131,7 +130,7 @@ base::JSONReader::Result DecodeJSONInRus
 }  // namespace
 }  // namespace serde_json_lenient
 
-#endif  // !BUILDFLAG(IS_NACL)
+#endif  // 0
 
 namespace base {
 
@@ -144,10 +143,10 @@ std::string JSONReader::Error::ToString(
 std::optional<Value> JSONReader::Read(std::string_view json,
                                       int options,
                                       size_t max_depth) {
-#if BUILDFLAG(IS_NACL)
+#if 1
   internal::JSONParser parser(options, max_depth);
   return parser.Parse(json);
-#else   // BUILDFLAG(IS_NACL)
+#else   // 1
   SCOPED_UMA_HISTOGRAM_TIMER_MICROS(kSecurityJsonParsingTime);
 
   JSONReader::Result result =
@@ -156,7 +155,7 @@ std::optional<Value> JSONReader::Read(st
     return std::nullopt;
   }
   return std::move(*result);
-#endif  // BUILDFLAG(IS_NACL)
+#endif  // 1
 }
 
 // static
@@ -185,7 +184,7 @@ std::optional<Value::List> JSONReader::R
 JSONReader::Result JSONReader::ReadAndReturnValueWithError(
     std::string_view json,
     int options) {
-#if BUILDFLAG(IS_NACL)
+#if 1
   internal::JSONParser parser(options);
   auto value = parser.Parse(json);
   if (!value) {
@@ -197,11 +196,11 @@ JSONReader::Result JSONReader::ReadAndRe
   }
 
   return std::move(*value);
-#else   // BUILDFLAG(IS_NACL)
+#else   // 1
   SCOPED_UMA_HISTOGRAM_TIMER_MICROS(kSecurityJsonParsingTime);
   return serde_json_lenient::DecodeJSONInRust(json, options,
                                               internal::kAbsoluteMaxDepth);
-#endif  // BUILDFLAG(IS_NACL)
+#endif  // 1
 }
 
 }  // namespace base
