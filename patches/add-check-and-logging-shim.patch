--- /dev/null
+++ b/base/check.h
@@ -0,0 +1,14 @@
+// Copyright 2020 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef BASE_CHECK_H_
+#define BASE_CHECK_H_
+
+#include "absl/log/absl_check.h"
+
+#define CHECK(cond) ABSL_CHECK(cond)
+
+#define DCHECK(cond) ABSL_DCHECK(cond)
+
+#endif  // BASE_CHECK_H_
--- /dev/null
+++ b/base/check_op.h
@@ -0,0 +1,24 @@
+// Copyright 2020 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef BASE_CHECK_OP_H_
+#define BASE_CHECK_OP_H_
+
+#include "absl/log/absl_check.h"
+
+#define CHECK_EQ(val1, val2) ABSL_CHECK_EQ(val1, val2)
+#define CHECK_NE(val1, val2) ABSL_CHECK_NE(val1, val2)
+#define CHECK_LE(val1, val2) ABSL_CHECK_LE(val1, val2)
+#define CHECK_LT(val1, val2) ABSL_CHECK_LT(val1, val2)
+#define CHECK_GE(val1, val2) ABSL_CHECK_GE(val1, val2)
+#define CHECK_GT(val1, val2) ABSL_CHECK_GT(val1, val2)
+
+#define DCHECK_EQ(val1, val2) ABSL_DCHECK_EQ(val1, val2)
+#define DCHECK_NE(val1, val2) ABSL_DCHECK_NE(val1, val2)
+#define DCHECK_LE(val1, val2) ABSL_DCHECK_LE(val1, val2)
+#define DCHECK_LT(val1, val2) ABSL_DCHECK_LT(val1, val2)
+#define DCHECK_GE(val1, val2) ABSL_DCHECK_GE(val1, val2)
+#define DCHECK_GT(val1, val2) ABSL_DCHECK_GT(val1, val2)
+
+#endif  // BASE_CHECK_OP_H_
--- /dev/null
+++ b/base/logging.h
@@ -0,0 +1,49 @@
+// Copyright 2012 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef BASE_LOGGING_H_
+#define BASE_LOGGING_H_
+
+#include "absl/base/internal/raw_logging.h"
+#include "absl/log/absl_log.h"
+#include "base/check.h"
+#include "build/build_config.h"
+
+namespace logging {
+
+#define DLOG(severity) ABSL_LOG_INTERNAL_DLOG_IMPL(_##severity)
+#define DLOG_IF(severity, condition) \
+  ABSL_LOG_INTERNAL_DLOG_IF_IMPL(_##severity, condition)
+
+#ifndef NDEBUG
+#define DPLOG(severity) ABSL_LOG_INTERNAL_PLOG_IMPL(_##severity)
+#define DPLOG_IF(severity, condition) \
+  ABSL_LOG_INTERNAL_PLOG_IF_IMPL(_##severity, condition)
+#else
+#define DPLOG(severity) ABSL_LOG_INTERNAL_PLOG_IF_IMPL(_##severity, false)
+#define DPLOG_IF(severity, condition) \
+  ABSL_LOG_INTERNAL_PLOG_IF_IMPL(_##severity, false && (condition))
+#endif  // NDEBUG
+
+#define DVLOG(verbose_level) ABSL_LOG_INTERNAL_DVLOG_IMPL(verbose_level)
+
+#if BUILDFLAG(IS_WIN)
+typedef unsigned long SystemErrorCode;
+#elif BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)
+typedef int SystemErrorCode;
+#endif
+
+#define RAW_LOG(level, message)                                                \
+  do {                                                                         \
+    constexpr const char* absl_raw_log_internal_basename =                     \
+        ::absl::raw_log_internal::Basename(__FILE__, sizeof(__FILE__) - 1);    \
+    ::absl::raw_log_internal::RawLog(ABSL_RAW_LOG_INTERNAL_##level,            \
+                                     absl_raw_log_internal_basename, __LINE__, \
+                                     message);                                 \
+    ABSL_RAW_LOG_INTERNAL_MAYBE_UNREACHABLE_##level;                           \
+  } while (0)
+
+}  // namespace logging
+
+#endif  // BASE_LOGGING_H_
--- /dev/null
+++ b/base/notreached.h
@@ -0,0 +1,26 @@
+// Copyright 2020 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef BASE_NOTREACHED_H_
+#define BASE_NOTREACHED_H_
+
+#include "absl/log/absl_log.h"
+#include "base/macros/uniquify.h"
+
+namespace logging {
+
+#define NOTREACHED() ABSL_LOG(FATAL) << "NOTREACHED hit. "
+
+// ABSL_LOG(FATAL) is marked as [[noreturn]].  Use switch statement to suppress
+// unreachable-code warnings.
+#define DUMP_WILL_BE_NOTREACHED()                                  \
+  switch (int BASE_UNIQUIFY(notreached_internal_) = 0)             \
+  case 0:                                                          \
+  default:                                                         \
+    ABSL_LOG_IF(FATAL, (BASE_UNIQUIFY(notreached_internal_) == 0)) \
+        << "NOTREACHED hit. "
+
+}  // namespace logging
+
+#endif  // BASE_NOTREACHED_H_
