--- a/base/sequence_checker.h
+++ b/base/sequence_checker.h
@@ -5,10 +5,8 @@
 #ifndef BASE_SEQUENCE_CHECKER_H_
 #define BASE_SEQUENCE_CHECKER_H_
 
-#include "base/base_export.h"
-#include "base/dcheck_is_on.h"
-#include "base/macros/uniquify.h"
-#include "base/sequence_checker_impl.h"
+#include "base/check.h"
+#include "base/thread_annotations.h"
 
 // SequenceChecker verifies mutual exclusion between calls to its
 // `CalledOnValidSequence()` method. Mutual exclusion is guaranteed if all calls
@@ -71,18 +69,18 @@
 //     SEQUENCE_CHECKER(sequence_checker_);
 //   }
 
-#if DCHECK_IS_ON()
+#if 0
 #define SEQUENCE_CHECKER(name) base::SequenceChecker name
 #define DCHECK_CALLED_ON_VALID_SEQUENCE(name, ...)   \
   base::ScopedValidateSequenceChecker BASE_UNIQUIFY( \
       scoped_validate_sequence_checker_)(name, ##__VA_ARGS__)
 #define DETACH_FROM_SEQUENCE(name) (name).DetachFromSequence()
-#else  // DCHECK_IS_ON()
+#else  // 0
 // A no-op expansion that can be followed by a semicolon at class level.
 #define SEQUENCE_CHECKER(name) static_assert(true, "")
 #define DCHECK_CALLED_ON_VALID_SEQUENCE(name, ...) EAT_CHECK_STREAM_PARAMS()
 #define DETACH_FROM_SEQUENCE(name)
-#endif  // DCHECK_IS_ON()
+#endif  // 0
 
 namespace base {
 
@@ -113,20 +111,20 @@ class THREAD_ANNOTATION_ATTRIBUTE__(capa
   void DetachFromSequence() {}
 };
 
-#if DCHECK_IS_ON()
+#if 0
 using SequenceChecker = SequenceCheckerImpl;
 #else
 using SequenceChecker = SequenceCheckerDoNothing;
-#endif  // DCHECK_IS_ON()
+#endif  // 0
 
-#if DCHECK_IS_ON()
+#if 0
 class BASE_EXPORT SCOPED_LOCKABLE ScopedValidateSequenceChecker {
  public:
   explicit ScopedValidateSequenceChecker(const SequenceChecker& checker)
       EXCLUSIVE_LOCK_FUNCTION(checker);
   ~ScopedValidateSequenceChecker() UNLOCK_FUNCTION();
 };
-#endif
+#endif  // 0
 
 }  // namespace base
 
