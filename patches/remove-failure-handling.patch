--- a/base/files/scoped_file_linux.cc
+++ b/base/files/scoped_file_linux.cc
@@ -11,7 +11,6 @@
 #include <atomic>
 
 #include "base/compiler_specific.h"
-#include "base/debug/stack_trace.h"
 #include "base/immediate_crash.h"
 #include "base/logging.h"
 
@@ -29,7 +28,9 @@ std::array<std::atomic_bool, kMaxTracked
 
 NOINLINE void CrashOnFdOwnershipViolation() {
   RAW_LOG(ERROR, "Crashing due to FD ownership violation:\n");
+#if 0
   base::debug::StackTrace().Print();
+#endif  // 0
   base::ImmediateCrash();
 }
 
--- a/base/memory/weak_ptr.cc
+++ b/base/memory/weak_ptr.cc
@@ -4,7 +4,7 @@
 
 #include "base/memory/weak_ptr.h"
 
-#if DCHECK_IS_ON()
+#if 0
 #include <ostream>
 
 #include "base/debug/stack_trace.h"
@@ -22,7 +22,7 @@ WeakReference::Flag::Flag() {
 void WeakReference::Flag::Invalidate() {
   // The flag being invalidated with a single ref implies that there are no
   // weak pointers in existence. Allow deletion on other thread in this case.
-#if DCHECK_IS_ON()
+#if 0
   std::unique_ptr<debug::StackTrace> bound_at;
   DCHECK(sequence_checker_.CalledOnValidSequence(&bound_at) || HasOneRef())
       << "WeakPtrs must be invalidated on the same sequenced thread as where "
--- a/base/win/atl_throw.cc
+++ b/base/win/atl_throw.cc
@@ -9,16 +9,17 @@
 #include "base/compiler_specific.h"
 #include "base/debug/alias.h"
 #include "base/immediate_crash.h"
-#include "base/process/memory.h"
 
 namespace base {
 namespace win {
 
 NOINLINE void __stdcall AtlThrowImpl(HRESULT hr) {
   base::debug::Alias(&hr);
+#if 0
   if (hr == E_OUTOFMEMORY) {
     base::TerminateBecauseOutOfMemory(0);
   }
+#endif
   ImmediateCrash();
 }
 
