--- a/base/apple/foundation_util.h
+++ b/base/apple/foundation_util.h
@@ -134,6 +134,7 @@ TYPE_NAME_FOR_CF_TYPE_DECL(SecPolicy);
 
 #undef TYPE_NAME_FOR_CF_TYPE_DECL
 
+#if 0
 // Returns the base bundle ID, which can be set by SetBaseBundleIDOverride,
 // below, but defaults to a reasonable string.
 BASE_EXPORT std::string_view BaseBundleID();
@@ -141,6 +142,7 @@ BASE_EXPORT std::string_view BaseBundleI
 // Sets a base bundle ID to override the default value returned by
 // BaseBundleID(), above.
 BASE_EXPORT void SetBaseBundleIDOverride(std::string_view new_base_bundle_id);
+#endif  // 0
 
 // CFCast<>() and CFCastStrict<>() cast a basic CFTypeRef to a more specific
 // CoreFoundation type. The compatibility of the passed object is found by
--- a/base/apple/foundation_util.mm
+++ b/base/apple/foundation_util.mm
@@ -25,7 +25,6 @@
 #include "base/numerics/safe_conversions.h"
 #include "base/strings/string_util.h"
 #include "base/strings/sys_string_conversions.h"
-#include "build/branding_buildflags.h"
 #include "build/build_config.h"
 
 #if !BUILDFLAG(IS_IOS)
@@ -293,6 +292,7 @@ TYPE_NAME_FOR_CF_TYPE_DEFN(SecPolicy)
 
 #undef TYPE_NAME_FOR_CF_TYPE_DEFN
 
+#if 0
 namespace {
 std::optional<std::string>& GetBaseBundleIDOverrideValue() {
   static NoDestructor<std::optional<std::string>> base_bundle_id;
@@ -316,6 +316,7 @@ std::string_view BaseBundleID() {
 void SetBaseBundleIDOverride(std::string_view new_base_bundle_id) {
   GetBaseBundleIDOverrideValue() = std::string(new_base_bundle_id);
 }
+#endif  // 0
 
 #define CF_CAST_DEFN(TypeCF)                                       \
   template <>                                                      \
