load("@bazel_skylib//rules:common_settings.bzl", "BuildSettingInfo")
load("//chromium/bazel:configurable_value.bzl", "ConfigurableValueInfo")

def _gen_buildflag_header_impl(ctx):
    """Generates a buildflag header file from the given flags."""

    include_guard = "%s_%s_H_" % (
        ctx.label.package.removeprefix("chromium/").replace("/", "_").upper(),
        ctx.attr.generator_name.upper(),
    )

    lines = [
        "// Generated by %s" % Label(":buildflag_header.bzl"),
        "// From \"%s\"" % ctx.label,
        "",
        "#ifndef %s" % include_guard,
        "#define %s" % include_guard,
        "",
        "#include \"%s\" // IWYU pragma: export" % ctx.attr.buildflag_macro_hdr,
        "",
    ]

    flag_prefix = ctx.attr.flag_prefix
    for key, target in ctx.attr.flags.items():
        if BuildSettingInfo in target:
            value = target[BuildSettingInfo].value
        elif ConfigurableValueInfo in target:
            value = target[ConfigurableValueInfo].value
        else:
            fail("Flag '%s' must be a build setting or configurable value." % key)
        if value == True:
            value = "1"
        elif value == False:
            value = "0"
        lines.append("#define %s%s() (%s)" % (flag_prefix, key, value))

    lines += [
        "",
        "#endif  // %s" % include_guard,
    ]

    ctx.actions.write(
        output = ctx.outputs.out,
        content = "\n".join(lines) + "\n",
    )

    return [DefaultInfo(files = depset([ctx.outputs.out]))]

gen_buildflag_header = rule(
    implementation = _gen_buildflag_header_impl,
    output_to_genfiles = True,
    attrs = {
        "out": attr.output(
            doc = "The output header file.",
            mandatory = True,
        ),
        "flags": attr.string_keyed_label_dict(
            doc = "A dictionary of flags to generate.",
            mandatory = True,
        ),
        "buildflag_macro_hdr": attr.string(
            doc = "The header file that defines the buildflag macro.",
            mandatory = True,
        ),
        "flag_prefix": attr.string(
            doc = "A prefix to add to each flag.",
            default = "",
        ),
    },
)
