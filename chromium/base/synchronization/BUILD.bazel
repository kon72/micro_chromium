load("//chromium:build_defs.bzl", "chromium_cc_library")

chromium_cc_library(
    name = "atomic_flag",
    srcs = ["atomic_flag.cc"],
    hdrs = ["atomic_flag.h"],
    visibility = ["//visibility:public"],
    deps = [
        "//chromium/base:base_export",
        "//chromium/base:check_op",
        "//chromium/base:sequence_checker",
    ],
)

chromium_cc_library(
    name = "lock",
    srcs = [
        "lock.cc",
        "lock_impl.h",
        "lock_subtle.h",
    ] + select({
        "@platforms//os:windows": ["lock_impl_win.cc"],
        "//conditions:default": ["lock_impl_posix.cc"],
    }),
    hdrs = ["lock.h"],
    target_compatible_with = select({
        "@platforms//os:android": ["@platforms//:incompatible"],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
    deps = [
        ":synchronization_buildflags",
        "//chromium/base:base_export",
        "//chromium/base:check",
        "//chromium/base:compiler_specific",
        "//chromium/base:dcheck_is_on",
        "//chromium/base:thread_annotations",
        "//chromium/base/containers:span",
        "//chromium/base/functional:function_ref",
        "//chromium/base/memory:raw_ptr_exclusion",
        "//chromium/base/memory:stack_allocated",
        "//chromium/base/threading:platform_thread_handle",
        "//chromium/base/threading:platform_thread_ref",
        "//chromium/build:build_config",
    ] + select({
        "@platforms//os:windows": [],
        "//conditions:default": [
            "//chromium/base:check_op",
            "//chromium/base/posix:safe_strerror",
        ],
    }),
)

chromium_cc_library(
    name = "synchronization_buildflags",
    hdrs = ["synchronization_buildflags.h"],
    visibility = ["//visibility:public"],
    deps = ["//chromium/build:buildflag"],
)
